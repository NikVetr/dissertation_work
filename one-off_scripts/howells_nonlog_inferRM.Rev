#Processing Howells' Dataset for phylogenetic inference under mvBM
mi = 0

# read in data
means <- readContinuousCharacterData("data/nonlogHowellsTraits.nex")

# get some useful variables from the data
numTips = means.ntaxa()
numBranches = 2 * numTips - 3
taxa = means.taxa()
numNodes = numTips * 2 - 1
ntraits <- means.nchar()
eta <- 1

#specify tree
topology ~ dnUniformTopology(taxa)

# we also move the tree topology
moves[++mi] = mvNNI(topology, weight=60.0)
moves[++mi] = mvSPR(topology, weight=100.0)

# specify branch length priors
TL_log ~ dnUniform(-3, 2)
moves[++mi] = mvSlide(TL_log, delta = 0.25, tune = true, weight = 5)
TL := 10^TL_log
br_prior = rep(1, numBranches)
br_len_props ~ dnDirichlet(br_prior)
moves[++mi] = mvBetaSimplex(br_len_props,tune=true,weight=60)
moves[++mi] = mvDirichletSimplex(br_len_props,numCats=numBranches,offset=0,tune=true,weight=10)
br_lens := br_len_props * TL

phylogeny := treeAssembly(topology, br_lens)

# construct the rate matrix prior
proportional_var ~ dnDirichlet(rep(1, ntraits))
average_rate = 13.35185
relative_var := proportional_var * ntraits * average_rate
relative_sd  := relative_var ^ 0.5
partial_correlation_matrix ~ dnLKJPartial(eta, ntraits)
correlation_matrix := fnPartialToCorr(partial_correlation_matrix)
rateMatrix := fnDecompVarCovar(relative_sd, correlation_matrix)
correlation := fnUpperTriangle(correlation_matrix)

# specify moves on the rate matrix
moves[++mi] = mvCorrelationMatrixRandomWalk(partial_correlation_matrix, sigma=0.1, weight=125.0, tune = true, tuneTarget=0.234)
moves[++mi] = mvBetaSimplex(proportional_var, tune = true, weight=30.0)
#for(i in 1:(ntraits - 1)) {
#	for(j in (i+1):ntraits) {
#		moves[++mi] = mvCorrelationMatrixSpecificElementBeta(partial_correlation_matrix, i, j, alpha=10.0, weight=0.25, tune = true, tuneTarget=0.234)
#	}
#}

#put it all together
brownData ~ dnPhyloMultivariateBrownianREML(phylogeny, rep(1.0, 57), rateMatrix, nSites=57)
brownData.clamp(means)
brownData.lnProbability()

#specify monitors
monitors[1] = mnScreen(printgen=1, TL)
#monitors[1] = mnModel(filename="output/howells_nonlog_inferRM.log", printgen=30, separator = TAB)
#monitors[2] = mnFile(phylogeny, filename="output/howells_nonlog_inferRM.trees", printgen=30, separator = TAB)
#monitors[3] = mnScreen(printgen=10, TL)

# We define our model.
mymodel = model(phylogeny)

# We run our MCMC
mymcmc = mcmc(mymodel, monitors, moves, nruns = 1)
#mymcmc.burnin(generations=25000,tuningInterval=2500)
mymcmc.operatorSummary()
mymcmc.run(generations=150000)
mymcmc.operatorSummary()
